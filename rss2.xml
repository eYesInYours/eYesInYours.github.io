<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小书斋</title>
    <link>http://ikchen.top/</link>
    
    <atom:link href="http://ikchen.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>用来分享平日接触到的有意思的知识</description>
    <pubDate>Fri, 13 Jan 2023 10:51:43 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>前端实习每周记</title>
      <link>http://ikchen.top/2022/11/14/%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E6%AF%8F%E5%91%A8%E8%AE%B0/</link>
      <guid>http://ikchen.top/2022/11/14/%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E6%AF%8F%E5%91%A8%E8%AE%B0/</guid>
      <pubDate>Mon, 14 Nov 2022 14:08:29 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;第一周（2022-x2F-11-x2F-14-11-x2F-18）&quot;&gt;&lt;a href=&quot;#第一周（2022-x2F-11-x2F-14-11-x2F-18）&quot; class=&quot;headerlink&quot; title=&quot;第一周（2022&amp;#x2F;11&amp;#x2F;14 -</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="第一周（2022-x2F-11-x2F-14-11-x2F-18）"><a href="#第一周（2022-x2F-11-x2F-14-11-x2F-18）" class="headerlink" title="第一周（2022&#x2F;11&#x2F;14 - 11&#x2F;18）"></a>第一周（2022&#x2F;11&#x2F;14 - 11&#x2F;18）</h4><h6 id="Monday"><a href="#Monday" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><p><input checked disabled type="checkbox"> 加飞书、企业微信</p></li><li><p><input checked disabled type="checkbox"> 了解类似的两个微信小程序</p><p><em>横向scroll-view</em></p><blockquote><p>issue：子元素宽度被压缩</p><p>solve：父元素设置overflow:auto，子元素设置flex-shrink:0  </p><br><p>issue：滚动条显隐show-scrollbar失效</p><p>solve：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">::webkit-scrollbar&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:transparent;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><br><p>issue：分页滑动paging-enabled失效</p><p>solve：用swiper组件替换scroll-view组件</p></blockquote></li><li><p><input checked disabled type="checkbox"> 了解公司各部门业务：销售、运营、BPIT等，认识直系、旁系领导，产品概讲</p></li><li><p><input checked disabled type="checkbox"> 与会，发懵</p></li></ul><h6 id="Tuesday"><a href="#Tuesday" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 页面上2&#x2F;3部分是可滑动卡片swiper，下1&#x2F;3部分为横向滑动scroll-view。</p><blockquote><p>情景：</p><p>当卡片切换时，scroll-view组件的子元素同样有卡片切换效果。且非最后四个子元素之前（一行展示四个子元素），表示选中的样式都添加到首个子元素上，scroll-view滑动。否则按次序往后切换选中样式。</p><p>点击scroll-view组件的某子项，显示对应可滑动卡片。</p><br><p>issue：暂令scroll-view一行显示5个子元素，当swiper卡片滑动到第6个子项及后，scroll-view没有发生滑动。</p><p>solve：</p><p>利用scroll-view组件的scroll-left属性，赋值：卡片的当前索引index*子项宽度。</p></blockquote></li><li><p><input checked disabled type="checkbox"> 协助任务：做产品玩法的详解，——福袋、抽盒、一番赏等。接触各部分对接。</p></li></ul><h6 id="Wednesday"><a href="#Wednesday" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 对接中台部门，了解客户需求，做开发功能清单。</p></li><li><p><input checked disabled type="checkbox"> 协助中台，购置办公用品。</p></li></ul><h6 id="Thursday"><a href="#Thursday" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><p><input checked disabled type="checkbox"> 对比同类型小程序，总结表格。</p></li><li><p><input checked disabled type="checkbox"> 采购。</p></li><li><p><input checked disabled type="checkbox"> 做头部活动、兴趣选择的组件。</p></li></ul><h6 id="Friday"><a href="#Friday" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><input checked disabled type="checkbox"> 联系小程序源码方。</li></ul><br><h4 id="第二周（11-x2F-21-11-x2F-25）"><a href="#第二周（11-x2F-21-11-x2F-25）" class="headerlink" title="第二周（11&#x2F;21 - 11&#x2F;25）"></a>第二周（11&#x2F;21 - 11&#x2F;25）</h4><h6 id="Monday-1"><a href="#Monday-1" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><input checked disabled type="checkbox"> 打杂。</li></ul><h6 id="Tuesday-1"><a href="#Tuesday-1" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><input checked disabled type="checkbox"> 摸鱼。</li></ul><h6 id="Wednesday-1"><a href="#Wednesday-1" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><input checked disabled type="checkbox"> 给我的任务是试一下服务器部署，了解微擎框架：可以用很多插件到微信小程序和公众号上去，比如说设置公众号的自动回复，或者发布一个转盘抽奖的插件到小程序上去，暂时了解是这样。</li></ul><h6 id="Thursday-1"><a href="#Thursday-1" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><input checked disabled type="checkbox"> 宝塔配置服务器，创建站点，同实习生帮我解决的。之前搭个人博客的域名，在这用上作用了，我给域名解析添加了条记录，后面申请SSL证书也需要添加记录。</li></ul><h6 id="Friday-1"><a href="#Friday-1" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 通过宝塔去下载微擎，有两个问题：</p><ol><li><p>需要SSL证书。</p></li><li><p>连接了shadowsockesX，但访问域名报错“500 Internal Privoxy Error”。如果不连接，下载微擎前的资质验证就会显示：无法访问外网。</p></li></ol></li><li><p><input checked disabled type="checkbox"> 现在公司的服务器炸了，没能继续做。——更新：有云服务器了，下午准备的Linux虚拟机没用上，浅看了下，之前宝塔建站的问题是因为服务器，它推荐是在Linux环境下，当时在windows，所以再去做就会很快。后续微擎的安装还不知道。</p></li></ul><h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><em>总结：</em></h6><p>这一部分的任务需要Linux基础，如果有了解，可能宝塔搭建站点时就不会稀里糊涂了。总的来说，的确是没接触过服务器部署这方面，每天焦头烂额但又没什么进展，甚至微擎都还没安装好。</p><p>打算周六周日把Linux学一下（非前端需要）。</p><p>更新：不需要Linux基础，当时需要的是Linux环境。</p><br><h4 id="第三周（11-x2F-28-12-x2F-2）"><a href="#第三周（11-x2F-28-12-x2F-2）" class="headerlink" title="第三周（11&#x2F;28 - 12&#x2F;2）"></a>第三周（11&#x2F;28 - 12&#x2F;2）</h4><h6 id="Monday-Wednesday"><a href="#Monday-Wednesday" class="headerlink" title="Monday - Wednesday"></a><em>Monday</em> - <em>Wednesday</em></h6><ul><li><input checked disabled type="checkbox"> 居家隔离，总算把微擎安装好了，但是现在又需要已备案的域名。</li></ul><h6 id="Thursday-2"><a href="#Thursday-2" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><input checked disabled type="checkbox"> 了解：PC端的购物网站是通过Shopify这个平台，通过模块化添加的方式，它也会提供主题模板，快速搭建起来的。Shopify平台写的页面用的是liquid语法。</li></ul><h6 id="Friday-2"><a href="#Friday-2" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 买了一个已备案的域名，下午在云服务器上准备按照之前的流程安装微擎，结果宝塔又报错了。——可能是PHP版本过高导致的站点404 page not found，接着是nginx报错创建不了站点，最后不管是PHP还是nginx都没法更新、卸载了。</p></li><li><p><input checked disabled type="checkbox"> 先在Linux虚拟机上试试，这些问题要交给上周说的那个小伙伴了。</p></li></ul><br><h4 id="第四周（12-x2F-5-12-x2F-9）"><a href="#第四周（12-x2F-5-12-x2F-9）" class="headerlink" title="第四周（12&#x2F;5 - 12&#x2F;9）"></a>第四周（12&#x2F;5 - 12&#x2F;9）</h4><h6 id="Monday-2"><a href="#Monday-2" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><input checked disabled type="checkbox"> 把阿里云域名的DNS服务器指向腾讯云，微擎正式能用了。</li></ul><h6 id="Tuesday-2"><a href="#Tuesday-2" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><input checked disabled type="checkbox"> 假的，微擎又不能访问了。解决了服务器解析和SSL证书问题。</li></ul><h6 id="Wednesday-2"><a href="#Wednesday-2" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 重新安装微擎，这会儿是真的可以了，然后在研究它的功能。</p></li><li><p><input checked disabled type="checkbox"> 创建微信公众号，但是微信公众平台上主体是个人，不能微信验证，有些接口权限比如：自定义菜单、群发、支付等等很多都没有。</p><p>虽然还只是简单实现了自动回复，但感觉很惊奇！</p></li><li><p><input checked disabled type="checkbox"> 主要还是得了解微信小程序这边在微擎封装了的用法，支持自己开发插件。后面可能是要在公众号的底部菜单放一个跳转到小程序的链接。</p></li></ul><h6 id="Thursday-3"><a href="#Thursday-3" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><input checked disabled type="checkbox"> 试用了一个微擎市场的微信小程序插件。</li><li><input checked disabled type="checkbox"> 用微信公众平台原生实现了公众号菜单，菜单项和小程序关联起来了。小程序审核过，大概就没问题了。</li></ul><h6 id="Friday-3"><a href="#Friday-3" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><input checked disabled type="checkbox"> 做了个内部用的小组件：表单展示、跳转页面修改。</li></ul><br><h4 id="第五周（12-x2F-12-12-x2F-16）"><a href="#第五周（12-x2F-12-12-x2F-16）" class="headerlink" title="第五周（12&#x2F;12 - 12&#x2F;16）"></a>第五周（12&#x2F;12 - 12&#x2F;16）</h4><h6 id="Monday-3"><a href="#Monday-3" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><p><input checked disabled type="checkbox"> 具体完善了一些组件的功能和样式：增删行的信息、登录注册，明天去看看路由拦截这一方面，比如说未登录状态想要跳转到名单内路径时，直接跳回登录注册页面。</p></li><li><p><input checked disabled type="checkbox"> 公司不用GitHub的原因是Github为公网，出于隐私就自己搭建了Git环境。</p></li></ul><h6 id="Tuesday-3"><a href="#Tuesday-3" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 做一个抽奖的页面，在想要怎么去实现中奖后那个礼盒抖动开盒、奖品展现的效果。——用popup弹出层组件，弹出一个GIF播放作开盒的效果。</p></li><li><p><input checked disabled type="checkbox"> 表单验证：未输入账号和密码不允许登录、输入长度限制等，用Vuex存一个变量值（Boolean）作index页提交按钮的disabled属性值，登录后在登录页将该变量赋值true（根据mobile和password都已输入，计算属性computed返回），index页按钮显示可提交，同时页面导航回index页。</p></li></ul><h6 id="Wednesday-3"><a href="#Wednesday-3" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 用Vue2的语法去写uniapp，在data中声明了两个Boolean类型变量，但是在methods中定义的点击事件无法修改它们。解决办法：定义两个computed分别引用这两个变量，再用完整写法都添加一个set、一个get。set将传入值赋给变量，get返回变量。</p></li><li><p><input checked disabled type="checkbox"> 表单验证：账号方面做了手机号码的正则校验。</p></li><li><p><input checked disabled type="checkbox"> 数据回显问题：</p><blockquote><p>scene：</p><p>在my-table表格组件中，点击某一行则将该行数据对象存入Vuex，然后跳转到详情页（分页），详情页将其获得并渲染。当修改某一条数据不想提交而返回上页，再次进入详情页的数据不应该是修改过的。</p><br><p>solve：</p><p>就是把传入Vuex中的某行数据对象，通过深拷贝独立于原本的数据对象。</p><p>浅拷贝和直接将数据对象传入Vuex，这样做在详情页获取并修改时，将原本的数据对象也更改了，那么下次再次点击表格某行进入详情页，依旧是上次的数据。</p></blockquote></li><li><p><input disabled type="checkbox"> 页面中用computed缓存了一个Vuex数据对象，绑定在一个表单上。其中每个input或select都通过v-model与该数据对象某属性形成双向绑定，但问题在于Vuex中的state数据只能通过mutations方法去修改，input或select可以读，但写就会出现问题。</p><blockquote><p>另外定义计算属性变量，set调用Vuex的mutations方法去修改该对象某属性的数据，get返回数据。这种方法也行，但是太繁琐了，好多computed和mutation的定义。</p><br><p>好奇怪，我在Vuex的state存了个变量，试验不通过mutations的方法直接去修改，果然报错了。但是！！奇怪的是直接用v-model绑定数据字段，居然是可行、不报错的。</p></blockquote></li></ul><h6 id="Thursday-4"><a href="#Thursday-4" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><p><input checked disabled type="checkbox"> 搜索框、登录组件的v-if判断，以前做过所以直接复用。</p></li><li><p><input checked disabled type="checkbox"> 用Vuex更新数据然后导航回页面时（登录后返回页面），会报一个错：</p><blockquote><p>Expected updated data but get first rendering data</p></blockquote><p>解决思路就是想怎么在数据更新后，让页面重新渲染。然后就用到了reLaunch这个方法，关闭所有页面，跳转到某个页面。</p></li><li><p><input checked disabled type="checkbox"> 给组件绑定click事件失效，加个修饰符native就行。另一种麻烦的方法是，在组件内部用emit触发给组件标签绑定的事件。</p></li></ul><h6 id="Friday-4"><a href="#Friday-4" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 调用getWindowInfo方法，得到设备的可用高度windowHeight，然后按占据的比例乘个几分之几，做各个区域view的高度。</p></li><li><p><input checked disabled type="checkbox"> tab切换，展示不同的内容。小程序没有document语法了，要选中元素设置display:block和display:none比较麻烦，还是用Vue的v-if和v-show做切换。点击不同的tab，同时将data中变量scene改变：0、1、2，对应不同展示的内容。</p></li><li><p><input checked disabled type="checkbox"> uni-drawer抽屉组件只能左右滑出，改了一下源码，从底部滑出。原本想用createAnimation方法将一个view以类似底部滑出的效果展现出来，但是这个view占据了一部分空间，导致页面可以整体上翻、下滑。</p></li></ul><br><h4 id="第六周（12-x2F-19-12-x2F-23）"><a href="#第六周（12-x2F-19-12-x2F-23）" class="headerlink" title="第六周（12&#x2F;19 - 12&#x2F;23）"></a>第六周（12&#x2F;19 - 12&#x2F;23）</h4><h6 id="Monday-4"><a href="#Monday-4" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><p><input checked disabled type="checkbox"> 利用swiper原生内置组件，做中奖信息向上轮播的功能。</p></li><li><p><input checked disabled type="checkbox"> 100px.net上有转盘、老虎机等抽奖模块的用法，在uniapp上配置和实现。</p></li></ul><h6 id="Tuesday-4"><a href="#Tuesday-4" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><p><input checked disabled type="checkbox"> uniapp开发的微信小程序，它的代码是压缩的，比如说一些变量名缩减成一个字符、方法名变成数字，逻辑性降低了。可以通过反编译（b站有教程），把微信小程序（原生）的代码反编译为uniapp的语法。但是，uniapp开发的微信小程序不能再反编译回uniapp语法！</p></li><li><p><input checked disabled type="checkbox"> 所以我现在在自己改代码，页面倒是能改回去，只是Js的逻辑代码和一些数据规范不是很好懂。而且这个微信小程序是很多模块的，模块和模块的交互，肯定不是我现在这样简单。总的来说，现在就是繁琐，没有操作性。</p></li></ul><h6 id="Wednesday-Friday"><a href="#Wednesday-Friday" class="headerlink" title="Wednesday - Friday"></a><em>Wednesday</em> - <em>Friday</em></h6><ul><li><input checked disabled type="checkbox"> 发烧居家。</li></ul><br><h4 id="第七周（12-x2F-26-12-x2F-30）"><a href="#第七周（12-x2F-26-12-x2F-30）" class="headerlink" title="第七周（12&#x2F;26 - 12&#x2F;30）"></a>第七周（12&#x2F;26 - 12&#x2F;30）</h4><h6 id="Monday-5"><a href="#Monday-5" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><p><input checked disabled type="checkbox"> 把之前做的登录组件拿过来用，根据token有无显示不同的组件。抽奖模块和登录结合起来，用户登录后可以记录奖品。</p></li><li><p><input checked disabled type="checkbox"> 对于抽奖过程的popup组件播放gif，设置isMaskClick为false，禁止用户操作。gif背景透明且播放一次，用定时器setTimeout在2s后（gif播放时间）弹出中奖信息。</p></li></ul><h6 id="Tuesday-5"><a href="#Tuesday-5" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 开始从后端验证抽奖模块的功能，比如中奖的数字由后端计算返回，不放在前端（爬虫很容易拿到并篡改）。</p></li><li><p><input checked disabled type="checkbox"> 反编译了“盒柜”和“我的”页面一部分。</p></li><li><p><input checked disabled type="checkbox"> 向后端提两个接口的需要，一个修改，一个查看。字段product定义为数组，元素是对象。用户登录后可以拿到用户id，然后用这个id去向查看接口发请求，拿到这个用户的已有的商品列表。同样，拿id去向修改接口发请求，修改用户的商品数据（中奖时添加）。</p></li></ul><h6 id="Wednesday-4"><a href="#Wednesday-4" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 把小程序的页面全都反编译出来了，js的逻辑还没去写。</p></li><li><p><input checked disabled type="checkbox"> 抽奖模块要和登录联合起来，vuex中store的token从storage中读取，登录时也存到storage中去，也就是说登录一次，一段时间内不用重复登录。有点小问题是，同页面内，用mapState去读store中的token，登录页面（v-if）和已有商品列表（v-else）总是显示登录页面，就是说token没有正常读取。</p><p>它在登录后，页面还是能根据token来切换组件的，但在这之前，即使localStorage中有token的值也没有正常显示对应的组件。</p><blockquote><p>果然，mapState出来的token，在页面首次加载时打印为undefined，登录后则有值。</p><br><p>solve:</p><p>在页面的data中也添加一个token字段，值从storage中读取getStorageSync(‘token’)。</p><p>本来mapState的token就可以正常切换组件的（即使首次加载），我之前也是这个做法，当时是没有问题的。</p></blockquote></li></ul><h6 id="Thursday-5"><a href="#Thursday-5" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><p><input checked disabled type="checkbox"> vuex mutations中定义的方法，携带第一个参数为state，访问为undefined。原因是state定义的形式为箭头函数，改成括号形式就可以了。</p></li><li><p><input checked disabled type="checkbox"> 下载的一个添加收获地址的组件里，input双向绑定用的是:value，但子传父打印的数据里都是空串，显然没有双向绑定成功，改用v-model。</p><blockquote><p>:value是v-bind:value的简写方式，这是单向数据绑定。</p></blockquote></li><li><p><input checked disabled type="checkbox"> 从页面A跳转到页面B，有一个参数需要在页面B用到，之前都是用vuex去设置。可以用另一种简单的方法，从页面A跳转到页面B时，在路径后携带参数，页面B中可以在生命周期onLoad(e)中接收到该参数。</p></li><li><p><input checked disabled type="checkbox"> 上一条的具体情景是：</p><blockquote><p>收货地址可以新增，也可以点击某一项进行修改。对后者，我们用到了路径携带过来的index参数，表示当前点击的收货地址数据的索引，进行数据渲染（点击不同项，显示不同的收货地址信息），当我们修改并确定保存，就将收获地址的数据字段userAddress中的第index项，修改为表单重新修改的对象。</p><br><p><em>issue:</em></p><p>问题就是直接修改数组对象，即使数据的确改变了，但页面不会渲染。</p><br><p><em>solve:</em></p><p>方法一：vuex是分模块做的，就在对应的js文件中引入Vue，调用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set(targetArray, index, obj)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(state.<span class="property">userAddress</span>, state.<span class="property">updateIndex</span>, userAddress)</span><br></pre></td></tr></table></figure><p>方法二：深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state.<span class="property">userAddress</span>[state.<span class="property">updateIndex</span>] = userAddress</span><br><span class="line">state.<span class="property">userAddress</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">userAddress</span>))</span><br></pre></td></tr></table></figure></blockquote></li></ul><h6 id="Friday-5"><a href="#Friday-5" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 向后端写了个文档：需要收货地址的查询、设置接口；订单的创建（返回订单号）、预付订单（返回订单信息，用于微信支付requestPayment）、查询订单（参数：订单号，是否成功支付）的接口。</p></li><li><p><input checked disabled type="checkbox"> 微信公众平台可以申请几个接口的权限，比如获取用户收货地址chooseAddress、地图选择位置接口chooseLocation等，需要在manifest.json的源码中设置（uniapp）。否则是调用不成功的。</p></li><li><p><input checked disabled type="checkbox"> chooseLocation唤起选择地址的界面（相当于嘀嘀打车快速定位）后，对地址数据处理，然后填充进收货地址的省区和详细地址input。</p></li><li><p><input checked disabled type="checkbox"> 这个收货地址的新增和修改是共用一个组件的，我在组件里定义了一个props，修改的话就会传一个数据对象给组件，然后把这个数据对象赋值给组件内部data的一个字段userAddress。</p><p>现在的情景是如果我是新增收货地址，那么上一条所做的chooseLocation选择地址、填充input，此时失效。我一直以为是HBuilderX的问题时好时坏，最后发现是传入的props数据字段的赋值没有做条件限制。如果没有传入props，就会把空对象赋给本地，后面就找不到对象底下的数据字段。</p><p>就是说，修改会传props给组件，新增不会。这里就要在组件里去判断对象（组件定义的那个prop）是否为空对象（default为{}），不是（表示有传入的数据）再做赋值给本地的操作。</p><p>回去复习了一下判断是否为空对象的两个方法：</p><blockquote><p><em>方法一：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">item</span>) !== <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><em>方法二</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">item</span>).<span class="property">length</span> !== <span class="number">0</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><br><h4 id="第八周（2023-x2F-1-x2F-3-1-x2F-6）"><a href="#第八周（2023-x2F-1-x2F-3-1-x2F-6）" class="headerlink" title="第八周（2023&#x2F;1&#x2F;3 - 1&#x2F;6）"></a>第八周（2023&#x2F;1&#x2F;3 - 1&#x2F;6）</h4><h6 id="Monday-6"><a href="#Monday-6" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><input checked disabled type="checkbox"> 休假。</li></ul><h6 id="Tuesday-6"><a href="#Tuesday-6" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 通过一个接口请求回来的数据列表，首先存到本地storage里，读取的速度快很多。</p></li><li><p><input checked disabled type="checkbox"> token失效，页面登出</p><blockquote><p>通过登录接口拿到expire字段，存到vuex，然后在vuex存入token的方法的末尾加上一个定时器setTimeout（只执行一次），清除token（vuex和storage），时间为之前存入的expire字段。</p><p>让后端暂时把expire改成15000（15s），情况是token数据是清除掉了，但是页面没有刷新为登出状态。重新编译才有效果。</p><p>vuex数据刷新了，但组件本地的数据没有更新。</p><p>之前遇到这种不能刷新的问题，用relaunch（关闭所有页面，进入某页面）或者redirectTo（重定向）就相当于刷新了页面（数据就和vuex保持一致了），但是现在当前页不能跳转到当前页。本来的想法是在当前页同样开启一个一次性定时器setTimeout，时间为通过mapState传递过来的expire过期时间，重新跳转到当前页。</p><br><p>嘿！又可以重定向到当前页了！！</p><p>真的好离谱，我试验了下：在定时器里写的重定向就是不可行，非得要我在定时器函数外写的uni.redirectTo，复制进定时器函数内才有效果！这是HbuilderX的问题吧！！</p><p>又试验了下：在定时器里写的，有时有用有时失效。</p></blockquote></li><li><p><input checked disabled type="checkbox"> 上周有一个问题是mapState出来的数据初次渲染无效，不得不在本地data中读取了storage的数据（同数据）。现在报错了，把data数据去掉报错消失。（大概两小时后）又要给data数据加上才行…</p><p>不用mapState了，直接在本地data中用getStorage()读取vuex存储到本地的数据。</p></li><li><p><input checked disabled type="checkbox"> 在vuex的address模块中，getters返回一个选择为默认的地址，通过filter方法（它是返回符合条件的元素）。</p></li></ul><p>总结：之前用vscode写后台管理，报错了，一定是我的语法问题。现在用HBuilderX写uniapp，我真的总会怀疑是软件的问题，某些程序时可行、时不可行！某些逻辑可通的（我确信）理论，居然不被支持！</p><p>或者是uniapp的语法问题，我刷了几篇论坛，似乎是它的坑比较多。</p><h6 id="Wednesday-5"><a href="#Wednesday-5" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 简单做出了一个抽奖联合登录、发货、订单（暂无）、商品详情的模块，只是功能，完全没有UI。ld让前后端写个文档具体描述：到完整上线要多少人天。不包括测试，前端的优化、设计和编写暂时是10天&#x2F;人。</p></li><li><p><input checked disabled type="checkbox"> 之前反编译出来的uniapp程序，其中的组件可以复用出来。优化已中奖商品列表，样式问题：</p><blockquote><p>一个顶部导航条（组件）的切换，底下是另一个区域。这个区域用margin-top和导航条隔离开，但总是导致margin-top的值变成导航条的高度，两个区域紧连接在一起.</p><br><p>用绝对定位absolute解决，不再占有原来空间。（相对定位relative原有空间还是存在的，所以不起效）。</p></blockquote></li><li><p><input checked disabled type="checkbox"> 优化收货地址列表及详情页的样式。黑白灰搭配一丢丢许嵩妹妹说很有韵味的淡紫，好看的嘞！</p></li><li><p><input checked disabled type="checkbox"> 收货地址的两种情况（修改和添加），对于修改，switch组件设为默认（true）的同时用forEach在vuex里把所有的地址的isDefault设为false，之前没有考虑到添加，导致添加设置的默认在收货地址列表上会和已有默认造成重复。提交时再执行一遍vuex中forEach的那个方法就行。</p><p>另外，这时不填写任何地址信息也是可以提交的，地址列表就会显示一个空白的子项，应该禁止：条件判断对象每项元素boolean值，短路或||连接，进入判断return一条showToast。</p><p>删除也好做，根据列表的index值，删除（splice）vuex中state的地址信息数组对应索引的对象元素。</p></li></ul><h6 id="Thursday-6"><a href="#Thursday-6" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><p><input checked disabled type="checkbox"> 反编译JS第一步，读懂data里参数的含义。抽奖页面的逻辑展示是通过不同参数的v-if和v-else来判断，有一块支付区域的展示比较复杂，用到了三层if、else对，又要考虑特殊情况（就是用到额外的参数做条件），理清楚关系和做参数文档（格式、作用注释）——14个参数param，90行，花了我两三小时。因为到时后端要去做这些参数，肯定要考虑到前端是怎么做呈现的，参数的逻辑他来做就要我说清楚。</p></li><li><p><input checked disabled type="checkbox"> 参数里有个变量是$root会报一个toJSON未定义但在渲染时使用的错，改成root。然后简单完善了这个抽奖页面的点击商品弹出详情popup、弹出支付popup、页面跳转的方法。</p></li></ul><h6 id="Friday-6"><a href="#Friday-6" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 根据参数显示界面，完善方法methods——耐心还是能看懂的。</p></li><li><p><input checked disabled type="checkbox"> 做参数字段文档。</p></li></ul><br><h4 id="第九周（1-x2F-9-1-x2F-13）"><a href="#第九周（1-x2F-9-1-x2F-13）" class="headerlink" title="第九周（1&#x2F;9 - 1&#x2F;13）"></a>第九周（1&#x2F;9 - 1&#x2F;13）</h4><h6 id="Monday-7"><a href="#Monday-7" class="headerlink" title="Monday"></a><em>Monday</em></h6><ul><li><p><input checked disabled type="checkbox"> 上周用一个轮播图组件的同时，底下有一块卡片区域，用于显示对应轮播图奖品的概率、品牌、价格。卡片左右分别是前进、后退按钮，可以切换轮播的奖品图。</p><blockquote><p>轮播图组件图片切换时，会更新组件的当前索引current字段，点击切换我们只要对这个字段进行加、减、小于0则赋值为图片个数减1（末尾同理）。</p><p>当然要做节流处理，不然一个图片正在轮播时又点击切换，就会有切换效果的异常。</p><p>思想就是设置一个标识moving，初始false。在点击切换（methods）时首先判断如果为true，return出去、不进入函数，然后再把moving设置为true。最后要在程序处理完后把标识重新设置为false，表示轮播结束，可再次切换。</p><p>uniapp的原生组件swiper中有个动画结束方法animationfinish，此时把标识moving设置为false，符合思想并且实现了效果。之所以不在点击切换的method末尾设置为false，是这时即便设置了，图片轮播时标识已经为false（执行完切换的method再去轮播）。</p></blockquote></li></ul><h6 id="Tuesday-7"><a href="#Tuesday-7" class="headerlink" title="Tuesday"></a><em>Tuesday</em></h6><ul><li><input checked disabled type="checkbox"> 写页面，没有设计稿。</li></ul><h6 id="Wednesday-6"><a href="#Wednesday-6" class="headerlink" title="Wednesday"></a><em>Wednesday</em></h6><ul><li><p><input checked disabled type="checkbox"> 写uniapp还是要用响应式rpx（2rpx等于1px）为单位去适配不同的机型。</p></li><li><p><input checked disabled type="checkbox"> 有一块区域设置了高度690rpx，A机型能全部显示出来，B机型最大显示高度650rpx。因此造成的布局样式错乱，把高度改成650rpx（兼容最小标准）。</p></li><li><p><input checked disabled type="checkbox"> 有时改一个样式，其他很多地方也要跟着一起改。用less预编译定义样式变量，要有这个习惯，之前真的好麻烦。</p></li><li><p><input checked disabled type="checkbox"> 写页面不会有太难的地方，就一点点耗时间。但就是昨天说的没有设计稿，大部分时间要用在设计上，要从产品的理念和客户视角出发。——其实就是借鉴其他的APP。</p></li></ul><h6 id="Thursday-7"><a href="#Thursday-7" class="headerlink" title="Thursday"></a><em>Thursday</em></h6><ul><li><p><input checked disabled type="checkbox"> 不要给block标签添加样式，block不会渲染在结构上，如果用less的语法在block的class基础上往下写，不会有效。</p></li><li><p><input checked disabled type="checkbox"> uniapp的drawer组件只能左右滑，上次修改了下可以底部滑出，但宽高只能指定。</p><blockquote><p>目的是：更换机型后都能做到drawer的宽度100%横屏、高度1&#x2F;2全屏。</p><p>情况：用getWindowInfo获取设备的宽高后，用数据绑定将这个宽或高的字段（本地data默认为0），通过prop传入drawer组件，但在组件内这个值总为0。非动态绑定的数据字段比如一个数字，组件能正常获取。</p><br><p>也就是说动态绑定时，组件内部获取的是prop传入数据字段的默认值0，修改默认值查验得知。但在组件外的mounted钩子中，本地字段的宽高数据赋值，通过验证是没有问题的。</p><p>可能：prop传入组件的时间在页面mounted钩子之前。</p><p>结果：官方文档说width字段不支持动态绑定。</p><br><p>页面mounted的逻辑放在计算属性computed里进行，return一个宽度，这样通过动态绑定给组件内部传值时，就相当于传入一个静态的值。</p></blockquote></li></ul><h6 id="Friday-7"><a href="#Friday-7" class="headerlink" title="Friday"></a><em>Friday</em></h6><ul><li><p><input checked disabled type="checkbox"> 封装组件时（写页面同理），样式不写在组件的style内，而是单独写一个css文件，再在组件内引入。直到刚才要写一个重复的样式，我就明白这样的好处了。（看的github项目）</p></li><li><p><input checked disabled type="checkbox"> 好玩的reduce：</p><blockquote><p>购物车的结算金额是根据商品的勾选状态checked来计算的，首先筛选出勾选状态为true的商品数组，然后映射出其中每个对象的价格price，即此时数据的每个元素是符合条件的价格price。</p><p>reduce方法：</p><p>第一个参数为回调函数，——它的头两个参数为总数值（或前一次回调函数返回的数值）prev，和遍历数组的当前值current。</p><p>第二个参数为回调函数中prev的初始值，默认0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">cartList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">checked</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span>)</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, current</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> prev + current</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content:encoded>
      
      
      <category domain="http://ikchen.top/categories/%E5%AE%9E%E4%B9%A0/">实习</category>
      
      
      <category domain="http://ikchen.top/tags/%E5%91%A8%E8%AE%B0/">周记</category>
      
      
      <comments>http://ikchen.top/2022/11/14/%E5%89%8D%E7%AB%AF%E5%AE%9E%E4%B9%A0%E6%AF%8F%E5%91%A8%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
